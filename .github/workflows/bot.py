import asyncio
import sqlite3
import os
from datetime import datetime
import pytz
from telethon import TelegramClient, events
import logging

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
API_ID = os.getenv('24826804')
API_HASH = os.getenv('048e59c243cce6ff788a7da214bf8119')
BOT_TOKEN = os.getenv('7597923417:AAHW1LyqzOIY7os9iHlYISqlGlyaG_5bU0c')

# –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
CHANNELS = [
    'gubernator_46',
    'kursk_info46',
    'Alekhin_Telega',
    'rian_ru',
    'kursk_ak46',
    'zhest_kursk_146',
    'novosti_efir',
    'kursk_tipich',
    'seymkursk',
    'kursk_smi',
    'kursk_russia',
    'belgorod01',
    'kurskadm',
    'Avtokadr46',
    'kurskbomond',
    'prigranichie_radar1',
    'grohot_pgr',
    'kursk_nasv',
    'mchs_46',
    'patriot046',
    'kursk_now',
    'Hinshtein',
    'incidentkursk',
    'zhest_belgorod',
    'Pogoda_Kursk',
    'pb_032',
    'tipicl32',
    'bryansk_smi',

]
# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
SUBSCRIBERS_FILE = 'subscribers.txt'
# ======================

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º–∏
def load_subscribers():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return [int(line.strip()) for line in f if line.strip()]
    except FileNotFoundError:
        return []

def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –≤ —Ñ–∞–π–ª"""
    with open(SUBSCRIBERS_FILE, 'w') as f:
        for user_id in subscribers:
            f.write(f"{user_id}\n")

def add_subscriber(user_id):
    """–î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    return subscribers

def remove_subscriber(user_id):
    """–£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
    return subscribers

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
def init_db():
    """–°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—èÈÅøÂÖç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    conn = sqlite3.connect(':memory:')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parsed_posts (
            post_id TEXT PRIMARY KEY,
            channel TEXT,
            text TEXT
        )
    ''')
    return conn

def is_post_sent(conn, post_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –ø–æ—Å—Ç"""
    cursor = conn.cursor()
    cursor.execute("SELECT post_id FROM parsed_posts WHERE post_id = ?", (post_id,))
    return cursor.fetchone() is not None

def mark_post_as_sent(conn, post_id, channel, text):
    """–ü–æ–º–µ—á–∞–µ–º –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO parsed_posts (post_id, channel, text) VALUES (?, ?, ?)",
        (post_id, channel, text)
    )
    conn.commit()

def generate_post_id(channel_name, message_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞"""
    return f"{channel_name}_{message_id}"

async def parse_channel(client, channel_name, conn):
    """–ü–∞—Ä—Å–∏–º –æ–¥–∏–Ω –∫–∞–Ω–∞–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã"""
    try:
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª: {channel_name}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        messages = await client.get_messages(channel_name, limit=5)
        new_posts = []
        posts_count = 0
        
        for message in messages:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message.text or not message.text.strip():
                continue
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
            post_id = generate_post_id(channel_name, message.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ—Å—Ç
            if not is_post_sent(conn, post_id):
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                post_text = message.text.strip()
                if len(post_text) > 1000:
                    post_text = post_text[:1000] + "..."
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                formatted_post = f"üì¢ **{channel_name}**\n\n{post_text}\n\nüïí *–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {message.date.astimezone(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')}"
                
                new_posts.append({
                    'text': formatted_post,
                    'post_id': post_id,
                    'channel': channel_name
                })
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                mark_post_as_sent(conn, post_id, channel_name, message.text)
                posts_count += 1
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è –ø–æ—Å–ª–µ 2 –ø–æ—Å—Ç–æ–≤
                if posts_count >= 2:
                    break
        
        return new_posts
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_name}: {e}")
        return []

async def send_news_to_user(client, user_id, posts):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not posts:
        await client.send_message(
            user_id, 
            "üì≠ –°–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await client.send_message(
        user_id,
        f"üìä **–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò**\n"
        f"üïí *–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞:* {moscow_time} (–ú–°–ö)\n"
        f"üìà *–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:* {len(posts)}\n"
        f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç—ã
    for post in posts:
        try:
            await client.send_message(user_id, post['text'], parse_mode='md')
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def send_news_to_all_subscribers(client):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return
    
    logger.info(f"üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    # –ü–∞—Ä—Å–∏–º –Ω–æ–≤–æ—Å—Ç–∏ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –≤—Å–µ—Ö
    db_conn = init_db()
    all_news = []
    
    for channel in CHANNELS:
        try:
            channel_news = await parse_channel(client, channel, db_conn)
            all_news.extend(channel_news)
            await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∫–∞–Ω–∞–ª–∞–º–∏
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
    for user_id in subscribers:
        try:
            await send_news_to_user(client, user_id, all_news)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    client = TelegramClient('news_bot_session', API_ID, API_HASH)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    @client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        user_id = event.chat_id
        add_subscriber(user_id)
        await event.reply(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
            "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ö—É—Ä—Å–∫–∞ –∏ –æ–±–ª–∞—Å—Ç–∏!\n\n"
            "üì∞ *–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:*\n"
            "‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ 2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ –°–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –ø–æ—Å—Ç—ã –∏–∑ 15+ –∫–∞–Ω–∞–ª–æ–≤\n"
            "‚Ä¢ –í—Ä–µ–º—è –ø–æ –ú–°–ö\n\n"
            "‚è∞ *–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:* 09:00, 13:00, 16:00 (–ú–°–ö)\n\n"
            "‚ùå –ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è: /stop"
        )
    
    @client.on(events.NewMessage(pattern='/subscribe'))
    async def subscribe_handler(event):
        user_id = event.chat_id
        add_subscriber(user_id)
        await event.reply(
            "‚úÖ **–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏!**\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ "
            "–ö—É—Ä—Å–∫–∞ –∏ –æ–±–ª–∞—Å—Ç–∏ –≤ 09:00, 13:00 –∏ 16:00 –ø–æ –ú–°–ö."
        )
    
    @client.on(events.NewMessage(pattern='/stop'))
    async def stop_handler(event):
        user_id = event.chat_id
        remove_subscriber(user_id)
        await event.reply(
            "‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π.**\n\n"
            "–ë–æ–ª—å—à–µ –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n"
            "–ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è: /start"
        )
    
    @client.on(events.NewMessage(pattern='/stats'))
    async def stats_handler(event):
        subscribers = load_subscribers()
        await event.reply(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**\n\n"
            f"‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n"
            f"‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –ø–æ –ú–°–ö: {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')}"
        )
    
    try:
        await client.start(bot_token=BOT_TOKEN)
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
        await send_news_to_all_subscribers(client)
        
        # –ë–æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
        logger.info("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –∫–æ–º–∞–Ω–¥ /start, /subscribe")
        await client.run_until_disconnected()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
